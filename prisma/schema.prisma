// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String      @id @default(uuid())
  email             String      @unique
  username          String      @unique
  bio               String?
  image             String?
  password          String
  articles          Article[]
  comments          Comment[]
  whoIsFollowing    Follower[] @relation("Follower")
  following         Follower[] @relation("Following")
  favoritedArticles Favorite[]
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  @@index([email, username])
}

model Follower {
  userId         String
  whoIsFollowing User   @relation("Follower", fields: [followingId], references: [id])
  followingId    String
  following      User   @relation("Following", fields: [userId], references: [id])

  @@id([userId, followingId])
}

model Tag {
  id        String    @id @default(uuid())
  name      String    @unique
  articles  Article[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Article {
  id          String   @id @default(uuid())
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  slug        String   @unique
  title       String   @unique
  description String
  body        String
  tagList     Tag[]
  comments    Comment[]
  favoritedArticles Favorite[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Favorite {
  userId    String
  articleId String
  article   Article @relation(fields: [articleId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@id([userId, articleId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  body      String
  articleId String
  article   Article  @relation(fields: [articleId], references: [id])
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
